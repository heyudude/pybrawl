# coding: utf-8

"""
    Brawl Stars API

    Unofficial Swagger definition for the official Brawl Stars API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pybrawl.configuration import Configuration


class Battles(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'mode': 'str',
        'type': 'str',
        'rank': 'int',
        'trophy_change': 'int',
        'players': 'list[BattlePlayers]'
    }

    attribute_map = {
        'mode': 'mode',
        'type': 'type',
        'rank': 'rank',
        'trophy_change': 'trophyChange',
        'players': 'players'
    }

    def __init__(self, mode=None, type=None, rank=None, trophy_change=None, players=None, local_vars_configuration=None):  # noqa: E501
        """Battles - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._mode = None
        self._type = None
        self._rank = None
        self._trophy_change = None
        self._players = None
        self.discriminator = None

        if mode is not None:
            self.mode = mode
        if type is not None:
            self.type = type
        if rank is not None:
            self.rank = rank
        if trophy_change is not None:
            self.trophy_change = trophy_change
        if players is not None:
            self.players = players

    @property
    def mode(self):
        """Gets the mode of this Battles.  # noqa: E501


        :return: The mode of this Battles.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this Battles.


        :param mode: The mode of this Battles.  # noqa: E501
        :type mode: str
        """

        self._mode = mode

    @property
    def type(self):
        """Gets the type of this Battles.  # noqa: E501


        :return: The type of this Battles.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Battles.


        :param type: The type of this Battles.  # noqa: E501
        :type type: str
        """

        self._type = type

    @property
    def rank(self):
        """Gets the rank of this Battles.  # noqa: E501


        :return: The rank of this Battles.  # noqa: E501
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this Battles.


        :param rank: The rank of this Battles.  # noqa: E501
        :type rank: int
        """

        self._rank = rank

    @property
    def trophy_change(self):
        """Gets the trophy_change of this Battles.  # noqa: E501


        :return: The trophy_change of this Battles.  # noqa: E501
        :rtype: int
        """
        return self._trophy_change

    @trophy_change.setter
    def trophy_change(self, trophy_change):
        """Sets the trophy_change of this Battles.


        :param trophy_change: The trophy_change of this Battles.  # noqa: E501
        :type trophy_change: int
        """

        self._trophy_change = trophy_change

    @property
    def players(self):
        """Gets the players of this Battles.  # noqa: E501


        :return: The players of this Battles.  # noqa: E501
        :rtype: list[BattlePlayers]
        """
        return self._players

    @players.setter
    def players(self, players):
        """Sets the players of this Battles.


        :param players: The players of this Battles.  # noqa: E501
        :type players: list[BattlePlayers]
        """

        self._players = players

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Battles):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Battles):
            return True

        return self.to_dict() != other.to_dict()
