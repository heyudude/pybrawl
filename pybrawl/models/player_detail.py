# coding: utf-8

"""
    Brawl Stars API

    Unofficial Swagger definition for the official Brawl Stars API  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pybrawl.configuration import Configuration


class PlayerDetail(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'tag': 'str',
        'name': 'str',
        'exp_level': 'int',
        'trophies': 'int',
        'best_trophies': 'int',
        'wins': 'int',
        'losses': 'int',
        'battle_count': 'int',
        'three_crown_wins': 'int',
        'challengebrawlers_won': 'int',
        'challenge_max_wins': 'int',
        'role': 'str',
        'donations': 'int',
        'donations_received': 'int',
        'total_donations': 'int',
        'war_day_wins': 'int',
        'clubbrawlers_collected': 'int',
        'club': 'ClubBase',
        'league_statistics': 'PlayerLeagueStatistics',
        'achievements': 'list[PlayerAchievement]',
        'badges': 'list[PlayerBadge]',
        'brawlers': 'list[Brawler]',
        'current_favouritebrawler': 'Brawler',
        'star_points': 'int'
    }

    attribute_map = {
        'tag': 'tag',
        'name': 'name',
        'exp_level': 'expLevel',
        'trophies': 'trophies',
        'best_trophies': 'bestTrophies',
        'wins': 'wins',
        'losses': 'losses',
        'battle_count': 'battleCount',
        'three_crown_wins': 'threeCrownWins',
        'challengebrawlers_won': 'challengebrawlersWon',
        'challenge_max_wins': 'challengeMaxWins',
        'role': 'role',
        'donations': 'donations',
        'donations_received': 'donationsReceived',
        'total_donations': 'totalDonations',
        'war_day_wins': 'warDayWins',
        'clubbrawlers_collected': 'clubbrawlersCollected',
        'club': 'club',
        'league_statistics': 'leagueStatistics',
        'achievements': 'achievements',
        'badges': 'badges',
        'brawlers': 'brawlers',
        'current_favouritebrawler': 'currentFavouritebrawler',
        'star_points': 'starPoints'
    }

    def __init__(self, tag=None, name=None, exp_level=None, trophies=None, best_trophies=None, wins=None, losses=None, battle_count=None, three_crown_wins=None, challengebrawlers_won=None, challenge_max_wins=None, role=None, donations=None, donations_received=None, total_donations=None, war_day_wins=None, clubbrawlers_collected=None, club=None, league_statistics=None, achievements=None, badges=None, brawlers=None, current_favouritebrawler=None, star_points=None, local_vars_configuration=None):  # noqa: E501
        """PlayerDetail - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._tag = None
        self._name = None
        self._exp_level = None
        self._trophies = None
        self._best_trophies = None
        self._wins = None
        self._losses = None
        self._battle_count = None
        self._three_crown_wins = None
        self._challengebrawlers_won = None
        self._challenge_max_wins = None
        self._role = None
        self._donations = None
        self._donations_received = None
        self._total_donations = None
        self._war_day_wins = None
        self._clubbrawlers_collected = None
        self._club = None
        self._league_statistics = None
        self._achievements = None
        self._badges = None
        self._brawlers = None
        self._current_favouritebrawler = None
        self._star_points = None
        self.discriminator = None

        if tag is not None:
            self.tag = tag
        if name is not None:
            self.name = name
        if exp_level is not None:
            self.exp_level = exp_level
        if trophies is not None:
            self.trophies = trophies
        if best_trophies is not None:
            self.best_trophies = best_trophies
        if wins is not None:
            self.wins = wins
        if losses is not None:
            self.losses = losses
        if battle_count is not None:
            self.battle_count = battle_count
        if three_crown_wins is not None:
            self.three_crown_wins = three_crown_wins
        if challengebrawlers_won is not None:
            self.challengebrawlers_won = challengebrawlers_won
        if challenge_max_wins is not None:
            self.challenge_max_wins = challenge_max_wins
        if role is not None:
            self.role = role
        if donations is not None:
            self.donations = donations
        if donations_received is not None:
            self.donations_received = donations_received
        if total_donations is not None:
            self.total_donations = total_donations
        if war_day_wins is not None:
            self.war_day_wins = war_day_wins
        if clubbrawlers_collected is not None:
            self.clubbrawlers_collected = clubbrawlers_collected
        if club is not None:
            self.club = club
        if league_statistics is not None:
            self.league_statistics = league_statistics
        if achievements is not None:
            self.achievements = achievements
        if badges is not None:
            self.badges = badges
        if brawlers is not None:
            self.brawlers = brawlers
        if current_favouritebrawler is not None:
            self.current_favouritebrawler = current_favouritebrawler
        if star_points is not None:
            self.star_points = star_points

    @property
    def tag(self):
        """Gets the tag of this PlayerDetail.  # noqa: E501


        :return: The tag of this PlayerDetail.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this PlayerDetail.


        :param tag: The tag of this PlayerDetail.  # noqa: E501
        :type: str
        """

        self._tag = tag

    @property
    def name(self):
        """Gets the name of this PlayerDetail.  # noqa: E501


        :return: The name of this PlayerDetail.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PlayerDetail.


        :param name: The name of this PlayerDetail.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def exp_level(self):
        """Gets the exp_level of this PlayerDetail.  # noqa: E501


        :return: The exp_level of this PlayerDetail.  # noqa: E501
        :rtype: int
        """
        return self._exp_level

    @exp_level.setter
    def exp_level(self, exp_level):
        """Sets the exp_level of this PlayerDetail.


        :param exp_level: The exp_level of this PlayerDetail.  # noqa: E501
        :type: int
        """

        self._exp_level = exp_level

    @property
    def trophies(self):
        """Gets the trophies of this PlayerDetail.  # noqa: E501


        :return: The trophies of this PlayerDetail.  # noqa: E501
        :rtype: int
        """
        return self._trophies

    @trophies.setter
    def trophies(self, trophies):
        """Sets the trophies of this PlayerDetail.


        :param trophies: The trophies of this PlayerDetail.  # noqa: E501
        :type: int
        """

        self._trophies = trophies

    @property
    def best_trophies(self):
        """Gets the best_trophies of this PlayerDetail.  # noqa: E501


        :return: The best_trophies of this PlayerDetail.  # noqa: E501
        :rtype: int
        """
        return self._best_trophies

    @best_trophies.setter
    def best_trophies(self, best_trophies):
        """Sets the best_trophies of this PlayerDetail.


        :param best_trophies: The best_trophies of this PlayerDetail.  # noqa: E501
        :type: int
        """

        self._best_trophies = best_trophies

    @property
    def wins(self):
        """Gets the wins of this PlayerDetail.  # noqa: E501


        :return: The wins of this PlayerDetail.  # noqa: E501
        :rtype: int
        """
        return self._wins

    @wins.setter
    def wins(self, wins):
        """Sets the wins of this PlayerDetail.


        :param wins: The wins of this PlayerDetail.  # noqa: E501
        :type: int
        """

        self._wins = wins

    @property
    def losses(self):
        """Gets the losses of this PlayerDetail.  # noqa: E501


        :return: The losses of this PlayerDetail.  # noqa: E501
        :rtype: int
        """
        return self._losses

    @losses.setter
    def losses(self, losses):
        """Sets the losses of this PlayerDetail.


        :param losses: The losses of this PlayerDetail.  # noqa: E501
        :type: int
        """

        self._losses = losses

    @property
    def battle_count(self):
        """Gets the battle_count of this PlayerDetail.  # noqa: E501


        :return: The battle_count of this PlayerDetail.  # noqa: E501
        :rtype: int
        """
        return self._battle_count

    @battle_count.setter
    def battle_count(self, battle_count):
        """Sets the battle_count of this PlayerDetail.


        :param battle_count: The battle_count of this PlayerDetail.  # noqa: E501
        :type: int
        """

        self._battle_count = battle_count

    @property
    def three_crown_wins(self):
        """Gets the three_crown_wins of this PlayerDetail.  # noqa: E501


        :return: The three_crown_wins of this PlayerDetail.  # noqa: E501
        :rtype: int
        """
        return self._three_crown_wins

    @three_crown_wins.setter
    def three_crown_wins(self, three_crown_wins):
        """Sets the three_crown_wins of this PlayerDetail.


        :param three_crown_wins: The three_crown_wins of this PlayerDetail.  # noqa: E501
        :type: int
        """

        self._three_crown_wins = three_crown_wins

    @property
    def challengebrawlers_won(self):
        """Gets the challengebrawlers_won of this PlayerDetail.  # noqa: E501


        :return: The challengebrawlers_won of this PlayerDetail.  # noqa: E501
        :rtype: int
        """
        return self._challengebrawlers_won

    @challengebrawlers_won.setter
    def challengebrawlers_won(self, challengebrawlers_won):
        """Sets the challengebrawlers_won of this PlayerDetail.


        :param challengebrawlers_won: The challengebrawlers_won of this PlayerDetail.  # noqa: E501
        :type: int
        """

        self._challengebrawlers_won = challengebrawlers_won

    @property
    def challenge_max_wins(self):
        """Gets the challenge_max_wins of this PlayerDetail.  # noqa: E501


        :return: The challenge_max_wins of this PlayerDetail.  # noqa: E501
        :rtype: int
        """
        return self._challenge_max_wins

    @challenge_max_wins.setter
    def challenge_max_wins(self, challenge_max_wins):
        """Sets the challenge_max_wins of this PlayerDetail.


        :param challenge_max_wins: The challenge_max_wins of this PlayerDetail.  # noqa: E501
        :type: int
        """

        self._challenge_max_wins = challenge_max_wins

    @property
    def role(self):
        """Gets the role of this PlayerDetail.  # noqa: E501


        :return: The role of this PlayerDetail.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this PlayerDetail.


        :param role: The role of this PlayerDetail.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def donations(self):
        """Gets the donations of this PlayerDetail.  # noqa: E501


        :return: The donations of this PlayerDetail.  # noqa: E501
        :rtype: int
        """
        return self._donations

    @donations.setter
    def donations(self, donations):
        """Sets the donations of this PlayerDetail.


        :param donations: The donations of this PlayerDetail.  # noqa: E501
        :type: int
        """

        self._donations = donations

    @property
    def donations_received(self):
        """Gets the donations_received of this PlayerDetail.  # noqa: E501


        :return: The donations_received of this PlayerDetail.  # noqa: E501
        :rtype: int
        """
        return self._donations_received

    @donations_received.setter
    def donations_received(self, donations_received):
        """Sets the donations_received of this PlayerDetail.


        :param donations_received: The donations_received of this PlayerDetail.  # noqa: E501
        :type: int
        """

        self._donations_received = donations_received

    @property
    def total_donations(self):
        """Gets the total_donations of this PlayerDetail.  # noqa: E501


        :return: The total_donations of this PlayerDetail.  # noqa: E501
        :rtype: int
        """
        return self._total_donations

    @total_donations.setter
    def total_donations(self, total_donations):
        """Sets the total_donations of this PlayerDetail.


        :param total_donations: The total_donations of this PlayerDetail.  # noqa: E501
        :type: int
        """

        self._total_donations = total_donations

    @property
    def war_day_wins(self):
        """Gets the war_day_wins of this PlayerDetail.  # noqa: E501


        :return: The war_day_wins of this PlayerDetail.  # noqa: E501
        :rtype: int
        """
        return self._war_day_wins

    @war_day_wins.setter
    def war_day_wins(self, war_day_wins):
        """Sets the war_day_wins of this PlayerDetail.


        :param war_day_wins: The war_day_wins of this PlayerDetail.  # noqa: E501
        :type: int
        """

        self._war_day_wins = war_day_wins

    @property
    def clubbrawlers_collected(self):
        """Gets the clubbrawlers_collected of this PlayerDetail.  # noqa: E501


        :return: The clubbrawlers_collected of this PlayerDetail.  # noqa: E501
        :rtype: int
        """
        return self._clubbrawlers_collected

    @clubbrawlers_collected.setter
    def clubbrawlers_collected(self, clubbrawlers_collected):
        """Sets the clubbrawlers_collected of this PlayerDetail.


        :param clubbrawlers_collected: The clubbrawlers_collected of this PlayerDetail.  # noqa: E501
        :type: int
        """

        self._clubbrawlers_collected = clubbrawlers_collected

    @property
    def club(self):
        """Gets the club of this PlayerDetail.  # noqa: E501


        :return: The club of this PlayerDetail.  # noqa: E501
        :rtype: ClubBase
        """
        return self._club

    @club.setter
    def club(self, club):
        """Sets the club of this PlayerDetail.


        :param club: The club of this PlayerDetail.  # noqa: E501
        :type: ClubBase
        """

        self._club = club

    @property
    def league_statistics(self):
        """Gets the league_statistics of this PlayerDetail.  # noqa: E501


        :return: The league_statistics of this PlayerDetail.  # noqa: E501
        :rtype: PlayerLeagueStatistics
        """
        return self._league_statistics

    @league_statistics.setter
    def league_statistics(self, league_statistics):
        """Sets the league_statistics of this PlayerDetail.


        :param league_statistics: The league_statistics of this PlayerDetail.  # noqa: E501
        :type: PlayerLeagueStatistics
        """

        self._league_statistics = league_statistics

    @property
    def achievements(self):
        """Gets the achievements of this PlayerDetail.  # noqa: E501


        :return: The achievements of this PlayerDetail.  # noqa: E501
        :rtype: list[PlayerAchievement]
        """
        return self._achievements

    @achievements.setter
    def achievements(self, achievements):
        """Sets the achievements of this PlayerDetail.


        :param achievements: The achievements of this PlayerDetail.  # noqa: E501
        :type: list[PlayerAchievement]
        """

        self._achievements = achievements

    @property
    def badges(self):
        """Gets the badges of this PlayerDetail.  # noqa: E501


        :return: The badges of this PlayerDetail.  # noqa: E501
        :rtype: list[PlayerBadge]
        """
        return self._badges

    @badges.setter
    def badges(self, badges):
        """Sets the badges of this PlayerDetail.


        :param badges: The badges of this PlayerDetail.  # noqa: E501
        :type: list[PlayerBadge]
        """

        self._badges = badges

    @property
    def brawlers(self):
        """Gets the brawlers of this PlayerDetail.  # noqa: E501


        :return: The brawlers of this PlayerDetail.  # noqa: E501
        :rtype: list[Brawler]
        """
        return self._brawlers

    @brawlers.setter
    def brawlers(self, brawlers):
        """Sets the brawlers of this PlayerDetail.


        :param brawlers: The brawlers of this PlayerDetail.  # noqa: E501
        :type: list[Brawler]
        """

        self._brawlers = brawlers

    @property
    def current_favouritebrawler(self):
        """Gets the current_favouritebrawler of this PlayerDetail.  # noqa: E501


        :return: The current_favouritebrawler of this PlayerDetail.  # noqa: E501
        :rtype: Brawler
        """
        return self._current_favouritebrawler

    @current_favouritebrawler.setter
    def current_favouritebrawler(self, current_favouritebrawler):
        """Sets the current_favouritebrawler of this PlayerDetail.


        :param current_favouritebrawler: The current_favouritebrawler of this PlayerDetail.  # noqa: E501
        :type: Brawler
        """

        self._current_favouritebrawler = current_favouritebrawler

    @property
    def star_points(self):
        """Gets the star_points of this PlayerDetail.  # noqa: E501


        :return: The star_points of this PlayerDetail.  # noqa: E501
        :rtype: int
        """
        return self._star_points

    @star_points.setter
    def star_points(self, star_points):
        """Sets the star_points of this PlayerDetail.


        :param star_points: The star_points of this PlayerDetail.  # noqa: E501
        :type: int
        """

        self._star_points = star_points

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlayerDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PlayerDetail):
            return True

        return self.to_dict() != other.to_dict()
