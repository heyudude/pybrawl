openapi: 3.0.0
info:
  version: "1.0"
  title: Brawl Stars API
  description: Unofficial Swagger definition for the official Brawl Stars API
  termsOfService: http://supercell.com/en/terms-of-service/
  license:
    name: GNU Lesser General Public License 3.0
    url: https://www.gnu.org/licenses/lgpl-3.0.html
tags:
  - name: clubs
  - name: players
  - name: rankings
  - name: brawlers
paths:
  '/clubs/{clubTag}':
    get:
      summary: Get club information
      description: >
        Get information about a single club by club tag. club tags can be found using club search operation.

        Note that club tags start with hash character '#' and that needs to be URL-encoded properly to work in URL, so for example club tag '#2ABC' would become '%232ABC' in the URL.
      tags:
        - clubs
      operationId: getclub
      parameters:
        - name: clubTag
          in: path
          description: Tag of the club to retrieve.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/club'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RequestThrottled'
        '500':
          $ref: '#/components/responses/UnknownException'
        '503':
          $ref: '#/components/responses/InMaintenance'
  '/clubs/{clubTag}/members':
    get:
      summary: List club members
      description: List club members
      tags:
        - clubs
      operationId: getclubMembers
      parameters:
        - name: clubTag
          in: path
          description: Tag of the club whose members to retrieve.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: Limit the number of items returned in the response.
          required: false
          schema:
            type: integer
        - name: after
          in: query
          description: >
            Return only items that occur after this marker. After marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
          required: false
          schema:
            type: integer
        - name: before
          in: query
          description: >
            Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clubMemberList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RequestThrottled'
        '500':
          $ref: '#/components/responses/UnknownException'
        '503':
          $ref: '#/components/responses/InMaintenance'
  '/players/{playerTag}':
    get:
      summary: Get player information
      description: >
        Get information about a single player by player tag. Player tags can befound either in game or by from club member lists.

        Note that player tags start with hash character '#' and that needs to be URL-encoded properly to work in URL, so for example player tag '#2ABC' would become '%232ABC' in the URL.
      tags:
        - players
      operationId: getPlayer
      parameters:
        - name: playerTag
          in: path
          description: |
            Tag of the player to retrieve.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerDetail'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RequestThrottled'
        '500':
          $ref: '#/components/responses/UnknownException'
        '503':
          $ref: '#/components/responses/InMaintenance'
  '/players/{playerTag}/battlelog':
    get:
      summary: Get log of recent battles for a player
      description: |
        Get list of recent battle results for a player.
      tags:
        - players
      operationId: getPlayerBattles
      parameters:
        - name: playerTag
          in: path
          description: |
            Tag of the player whose information to retrieve.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BattleLogEntry'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RequestThrottled'
        '500':
          $ref: '#/components/responses/UnknownException'
        '503':
          $ref: '#/components/responses/InMaintenance'

  /brawlers:
    get:
      summary: Get list of available brawlers
      description: |
        Get list of all available brawlers.
      tags:
        - brawlers
      operationId: getbrawlers
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrawlerList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RequestThrottled'
        '500':
          $ref: '#/components/responses/UnknownException'
        '503':
          $ref: '#/components/responses/InMaintenance'

security:
  - JWT: []
servers:
  - url: 'https://api.brawlstars.com/v1'
components:
  responses:
    BadRequest:
      description: Client provided incorrect parameters for the request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: >
        Access denied, either because of missing/incorrect credentials or used API token does not grant access to the requested resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    RequestThrottled:
      description: >
        Request was throttled, because amount of requests was above the threshold defined for the used API token.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnknownException:
      description: |
        Unknown error happened when handling the request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InMaintenance:
      description: |
        Service is temprorarily unavailable because of maintenance.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  securitySchemes:
    JWT:
      type: apiKey
      description: JSON Web Token used as an API key
      name: authorization
      in: header

  schemas:
    Error:
      type: object
      properties:
        reason:
          type: string
        message:
          type: string

    PlayerDetail:
      type: object
      properties:
        tag:
          type: string
        name:
          type: string
        expLevel:
          type: integer
        expPoints:
          type: integer
        trophies:
          type: integer
        highestTrophies:
          type: integer
        powerPlayPoints:
          type: integer
        highestpowerPlayPoints:
          type: integer
        soloVictories:
          type: integer
        duoVictories:
          type: integer
        BestRoboRumbleTime:
          type: integer
        BestTimeAsBigBrawler:
          type: integer
        club:
          $ref: '#/components/schemas/ClubBase'
        Brawlers:
          type: array
          items:
            $ref: '#/components/schemas/Brawler'
        currentFavouritebrawler:
          $ref: '#/components/schemas/Brawler'
        starPoints:
          type: integer

    BattleLogEntry:
      type: object
      properties:
        battle:
          type: string
        battleTime:
          type: string
        event:
          type: array
          mode:
            $ref: '#/components/schemas/BattleLogTeam'
        id:
          type: array
          items:
            $ref: '#/components/schemas/BattleLogTeam'

    BattleLogTeam:
      type: object
      properties:
        tag:
          type: string
        name:
          type: string
        startingTrophies:
          type: integer
        trophyChange:
          type: integer
        crowns:
          type: integer
        kingTowerHitPoints:
          type: integer
        princessTowersHitPoints:
          type: array
          items:
            type: integer
        club:
          $ref: '#/components/schemas/clubBase'
        brawlers:
          type: array
          items:
            $ref: '#/components/schemas/Brawler'

    Brawler:
      type: object
      properties:
        name:
          type: string
        id:
          type: integer
        level:
          type: integer
        count:
          type: integer
        maxLevel:
          type: integer
        iconUrls:
          type: object
          properties:
            medium:
              type: string

    BrawlerList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Brawler'

    ClubBase:
      type: object
      properties:
        tag:
          type: string
        name:
          type: string
        badgeId:
          type: integer

    club:
      type: object
      properties:
        tag:
          type: string
        name:
          type: string
        badgeId:
          type: integer
        type:
          type: string
        clubScore:
          type: integer
        requiredTrophies:
          type: integer
        members:
          type: integer
        location:
          $ref: '#/components/schemas/Location'
        description:
          type: string
        memberList:
          type: array
          items:
            $ref: '#/components/schemas/clubMember'

    clubMemberList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/clubMember'
        paging:
          $ref: '#/components/schemas/SearchPaging'

    clubMember:
      type: object
      properties:
        tag:
          type: string
        name:
          type: string
        expLevel:
          type: integer
        trophies:
          type: integer
        role:
          type: string
        lastSeen:
          type: string
        clubRank:
          type: integer
        previousclubRank:
          type: integer
   
    SearchPaging:
      type: object
      properties:
        cursors:
          type: object
          properties:
            after:
              type: string
            before:
              type: string
