# coding: utf-8

"""
    Brawl Stars API

    Unofficial Swagger definition for the official Brawl Stars API  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import pybrawl
from pybrawl.models.player_detail import PlayerDetail  # noqa: E501
from pybrawl.rest import ApiException

class TestPlayerDetail(unittest.TestCase):
    """PlayerDetail unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test PlayerDetail
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = pybrawl.models.player_detail.PlayerDetail()  # noqa: E501
        if include_optional :
            return PlayerDetail(
                tag = '0', 
                name = '0', 
                exp_level = 56, 
                trophies = 56, 
                best_trophies = 56, 
                wins = 56, 
                losses = 56, 
                battle_count = 56, 
                three_crown_wins = 56, 
                challengebrawlers_won = 56, 
                challenge_max_wins = 56, 
                role = '0', 
                donations = 56, 
                donations_received = 56, 
                total_donations = 56, 
                war_day_wins = 56, 
                clubbrawlers_collected = 56, 
                club = pybrawl.models.club_base.ClubBase(
                    tag = '0', 
                    name = '0', 
                    badge_id = 56, ), 
                league_statistics = pybrawl.models.player_league_statistics.PlayerLeagueStatistics(
                    current_season = pybrawl.models.season_statistics.SeasonStatistics(
                        id = '0', 
                        trophies = 56, 
                        best_trophies = 56, ), 
                    previous_season = pybrawl.models.season_statistics.SeasonStatistics(
                        id = '0', 
                        trophies = 56, 
                        best_trophies = 56, ), 
                    best_season = pybrawl.models.season_statistics.SeasonStatistics(
                        id = '0', 
                        trophies = 56, 
                        best_trophies = 56, ), ), 
                achievements = [
                    pybrawl.models.player_achievement.PlayerAchievement(
                        name = '0', 
                        stars = 56, 
                        value = 56, 
                        target = 56, 
                        info = '0', )
                    ], 
                badges = [
                    pybrawl.models.player_badge.PlayerBadge(
                        name = '0', 
                        level = 56, 
                        max_level = 56, 
                        progress = 56, )
                    ], 
                brawlers = [
                    pybrawl.models.brawler.brawler(
                        name = '0', 
                        id = 56, 
                        level = 56, 
                        count = 56, 
                        max_level = 56, 
                        icon_urls = pybrawl.models.brawler_icon_urls.brawler_iconUrls(
                            medium = '0', ), )
                    ], 
                current_favouritebrawler = pybrawl.models.brawler.brawler(
                    name = '0', 
                    id = 56, 
                    level = 56, 
                    count = 56, 
                    max_level = 56, 
                    icon_urls = pybrawl.models.brawler_icon_urls.brawler_iconUrls(
                        medium = '0', ), ), 
                star_points = 56
            )
        else :
            return PlayerDetail(
        )

    def testPlayerDetail(self):
        """Test PlayerDetail"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
